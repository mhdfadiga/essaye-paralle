#include <iostream>
#include <stdexcept>
#include <iomanip>

template <typename T = double>
class MatrixDense {
private:
    unsigned _m; // Nombre de lignes
    unsigned _n; // Nombre de colonnes
    T* _data;    // Tableau 1D pour stocker les données

public:
    // Constructeur
    MatrixDense(unsigned m, unsigned n) : _m(m), _n(n) {
        _data = new T[_m * _n]();
    }

    // Destructeur
    ~MatrixDense() {
        delete[] _data;
    }

    // Accéder à un élément (lecture/écriture)
    T& operator()(unsigned i, unsigned j) {
        if (i >= _m || j >= _n) {
            throw std::out_of_range("Index hors des limites !");
        }
        return _data[i * _n + j];
    }

    // Accéder à un élément (lecture seule)
    T operator()(unsigned i, unsigned j) const {
        if (i >= _m || j >= _n) {
            throw std::out_of_range("Index hors des limites !");
        }
        return _data[i * _n + j];
    }

    // Affichage
    void print() const {
        for (unsigned i = 0; i < _m; ++i) {
            for (unsigned j = 0; j < _n; ++j) {
                std::cout << std::setw(10) << (*this)(i, j) << " ";
            }
            std::cout << "\n";
        }
    }

    // Méthode pour conserver uniquement la diagonale
    MatrixDense diagonalOnly() const {
        MatrixDense result(_m, _n);
        for (unsigned i = 0; i < _m && i < _n; ++i) {
            result(i, i) = (*this)(i, i); // Conserver les éléments diagonaux
        }
        return result;
    }

    // Addition de matrices
    MatrixDense operator+(const MatrixDense& other) const {
        if (_m != other._m || _n != other._n) {
            throw std::invalid_argument("Dimensions incompatibles pour l'addition !");
        }
        MatrixDense result(_m, _n);
        for (unsigned i = 0; i < _m * _n; ++i) {
            result._data[i] = _data[i] + other._data[i];
        }
        return result;
    }

    // Soustraction de matrices
    MatrixDense operator-(const MatrixDense& other) const {
        if (_m != other._m || _n != other._n) {
            throw std::invalid_argument("Dimensions incompatibles pour la soustraction !");
        }
        MatrixDense result(_m, _n);
        for (unsigned i = 0; i < _m * _n; ++i) {
            result._data[i] = _data[i] - other._data[i];
        }
        return result;
    }

    // Multiplication de matrices
    MatrixDense operator*(const MatrixDense& other) const {
        if (_n != other._m) {
            throw std::invalid_argument("Dimensions incompatibles pour la multiplication !");
        }
        MatrixDense result(_m, other._n);
        for (unsigned i = 0; i < _m; ++i) {
            for (unsigned j = 0; j < other._n; ++j) {
                T sum = 0;
                for (unsigned k = 0; k < _n; ++k) {
                    sum += (*this)(i, k) * other(k, j);
                }
                result(i, j) = sum;
            }
        }
        return result;
    }

    // Transposition de matrice
    MatrixDense transpose() const {
        MatrixDense result(_n, _m);
        for (unsigned i = 0; i < _m; ++i) {
            for (unsigned j = 0; j < _n; ++j) {
                result(j, i) = (*this)(i, j);
            }
        }
        return result;
    }
};

// Exemple d'utilisation
int main() {
    unsigned m = 3, n = 3;
    MatrixDense<double> A(m, n);
    MatrixDense<double> B(m, n);

    // Initialisation de la matrice
    for (unsigned i = 0; i < m; ++i) {
        for (unsigned j = 0; j < n; ++j)
        {
            A(i, j) = i + j + 1;
            B(i,j) = (i+1) * (j+2);
        }
    }

    std::cout << "Matrice A:\n";
    A.print();
    std::cout << "\nMatrice B:\n"; 
    B.print(); 
    // Addition MatrixDense<double>
    MatrixDense<double>C = A + B; 
    std::cout << "\nA + B:\n"; 
    C.print(); 
    // Soustraction
    MatrixDense<double>D = A - B;
    std::cout << "\nA - B:\n";
    D.print(); 
    // Transposition 
    MatrixDense<double>At = A.transpose();
    std::cout << "\nTransposee de A:\n";
    At.print();
    // Multiplication 
    MatrixDense<double>E = A.transpose() * B; 
    std::cout << "\nA^T * B:\n";
    E.print();

    // Conserver uniquement la diagonale
    MatrixDense<double> diagonal = A.diagonalOnly();
    std::cout << "\nMatrice avec uniquement la diagonale :\n";
    diagonal.print();

    return 0;
}
